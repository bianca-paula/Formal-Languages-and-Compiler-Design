%{
#include <stdio.h>
#include <string.h>
#include "y.tab.h"
int line = 0;
%}

%option noyywrap
%option caseless

IDENTIFIER              ([_a-zA-Z][a-zA-Z0-9_]{0,255})
INTEGER_CONSTANT        ([+-]?[1-9][0-9]*)|0
CHARACTER_CONSTANT      \'[a-zA-Z0-9]\'
STRING_CONSTANT         \"[-a-zA-Z0-9_:;!?.+/%*&#<> ^]*\"
BOOLEAN_CONSTANT        true|false


%%

declare                         {printf("Reserved word %s\n", yytext); return DECLARE;}
program                         {printf("Reserved word %s\n", yytext); return PROGRAM;}
var                             {printf("Reserved word %s\n", yytext); return VAR;}
integer                         {printf("Reserved word %s\n", yytext); return INTEGER;}
string                          {printf("Reserved word %s\n", yytext); return STRING;}
float                           {printf("Reserved word %s\n", yytext); return FLOAT;}
bool                            {printf("Reserved word %s\n", yytext); return BOOL;}
if                              {printf("Reserved word %s\n", yytext); return IF;}
while                           {printf("Reserved word %s\n", yytext); return WHILE;}
read                            {printf("Reserved word %s\n", yytext); return READ_OP;}
write                           {printf("Reserved word %s\n", yytext); return WRITE_OP;}
for                             {printf("Reserved word %s\n", yytext); return FOR;}
then                            {printf("Reserved word %s\n", yytext); return THEN;}
else                            {printf("Reserved word %s\n", yytext); return ELSE;}
endprogram                      {printf("Reserved word %s\n", yytext); return ENDPROGRAM;}
enddeclare                      {printf("Reserved word %s\n", yytext); return ENDDECLARE;}
endif                           {printf("Reserved word %s\n", yytext); return ENDIF;}
endwhile                        {printf("Reserved word %s\n", yytext); return ENDWHILE;}
endfor                          {printf("Reserved word %s\n", yytext); return ENDFOR;}
and                             {printf("Reserved word: %s\n", yytext); return AND;}
or                              {printf("Reserved word: %s\n", yytext); return OR;}

":"                             {printf( "Separator: %s\n", yytext ); return COLON;}
";"                             {printf( "Separator: %s\n", yytext ); return SEMI_COLON;}
","                             {printf( "Separator: %s\n", yytext ); return COMMA;}
"."                             {printf( "Separator: %s\n", yytext ); return DOT;}
"{"                             {printf( "Separator: %s\n", yytext ); return OPEN_CURLY_BRACKET;}
"}"                             {printf( "Separator: %s\n", yytext ); return CLOSED_CURLY_BRACKET;}
"("                             {printf( "Separator: %s\n", yytext ); return OPEN_ROUND_BRACKET;}
")"                             {printf( "Separator: %s\n", yytext ); return CLOSED_ROUND_BRACKET;}
"["                             {printf( "Separator: %s\n", yytext ); return OPEN_RIGHT_BRACKET;}
"]"                             {printf( "Separator: %s\n", yytext ); return CLOSED_RIGHT_BRACKET;}
"+"                             {printf( "Operator: %s\n", yytext ); return PLUS;}
"-"                             {printf( "Operator: %s\n", yytext ); return MINUS;}
"*"                             {printf( "Operator: %s\n", yytext ); return MUL;}
"/"                             {printf( "Operator: %s\n", yytext ); return DIV;}
"<"                             {printf( "Operator: %s\n", yytext ); return LT;}
">"                             {printf( "Operator: %s\n", yytext ); return GT;}
"<="                            {printf( "Operator: %s\n", yytext ); return LE;}
">="                            {printf( "Operator: %s\n", yytext ); return GE;}
"!="                            {printf( "Operator: %s\n", yytext ); return NE;}
"=="                            {printf( "Operator: %s\n", yytext ); return EQ;}
":="                            {printf( "Operator: %s\n", yytext ); return ATRIB;}
"!"                             {printf( "Operator: %s\n", yytext ); return NOT;}
{INTEGER_CONSTANT}              {printf("Integer const: %s\n",yytext);return CONST;}
{CHARACTER_CONSTANT}            {printf("Char const: %s\n",yytext);return CONST;}
{BOOLEAN_CONSTANT}              {printf("Bool const: %s\n",yytext);return CONST;}
{STRING_CONSTANT}               {printf("String const: %s\n",yytext);return CONST;}
{IDENTIFIER}                    {printf("Identifier: %s\n",yytext); return IDENTIFIER;}

[ \t]                           /* eat up whitespace */
[\n]                            {line++;}
[+-]?0[0-9]* {printf("Illegal constant at line %d\n", line); return -1;}

\'[a-zA-Z0-9]{2,}\' {printf("Character of length >=2 at line %d\n", line); return -1;}
.                               {printf("Error at line %d\n", line);}
%%